// l'algorithme en utulisant une proc√©dure

PROCEDURE dot_product(V1 : ARRAY_OF INTEGER,V2 : ARRAY_OF INTEGER,VAR ps:INTEGER)
VAR
 V1x:INTEGER:=V1[1]-V1[0]   
 V1y:INTEGER:=V1[3]-V1[2]
 V2x:INTEGER:=V2[1]-V2[0]   
 V2y:INTEGER:=V2[3]-V2[2]
BEGIN
    ps:=V1x*V2x+V1y*V2y
    write(ps)
END
ALGORITHM Dot product
VAR
    vec1 : ARRAY_OF INTEGER;
    vec2 : ARRAY_OF INTEGER;
    res:INTEGER:=0
    i:=INTEGER
BEGIN
   FOR i FROM 0 TO length(vec1)-1 STEP 1  DO
       read(vec1,vec2)
       END_FOR
       dot_product(vec1,vec2,res)
       IF (res=0) THEN
           write("vecteur 1 et vecteur 2 sont orthogonaux")
       ELSE
           write("vecteur 1 et vecteur 2 ne sont pas orthogonaux")
       END_IF
END

// l'algorithme en utulisant une fonction

FUNCTION dot_product(V1 : ARRAY_OF INTEGER,V2 : ARRAY_OF INTEGER) : INTEGER
VAR
   V1x:INTEGER:=V1[1]-V1[0]   
 V1y:INTEGER:=V1[3]-V1[2]
 V2x:INTEGER:=V2[1]-V2[0]   
 V2y:INTEGER:=V2[3]-V2[2]
 ps:INTEGER
BEGIN
    ps:=V1x*V2x+V1y*V2y
    write(ps)
END
ALGORITHM Dot product
VAR
    vec1 : ARRAY_OF INTEGER;
    vec2 : ARRAY_OF INTEGER;
    res:INTEGER:=0
    i:=INTEGER
BEGIN
   FOR i FROM 0 TO length(vec1)-1 STEP 1  DO
       read(vec1,vec2)
       END_FOR
       res:=dot_product(vec1,vec2)
       IF (res=0) THEN
           write("vecteur 1 et vecteur 2 sont orthogonaux")
       ELSE
           write("vecteur 1 et vecteur 2 ne sont pas orthogonaux")
       END_IF
END